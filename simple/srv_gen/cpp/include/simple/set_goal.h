/* Auto-generated by genmsg_cpp for file /home/nathan/ros_workspace/simple/srv/set_goal.srv */
#ifndef SIMPLE_SERVICE_SET_GOAL_H
#define SIMPLE_SERVICE_SET_GOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace simple
{
template <class ContainerAllocator>
struct set_goalRequest_ {
  typedef set_goalRequest_<ContainerAllocator> Type;

  set_goalRequest_()
  : destination_reached(false)
  {
  }

  set_goalRequest_(const ContainerAllocator& _alloc)
  : destination_reached(false)
  {
  }

  typedef uint8_t _destination_reached_type;
  uint8_t destination_reached;


private:
  static const char* __s_getDataType_() { return "simple/set_goalRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "cbbbc1950ecbc84853dd369f15537bd2"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "bdb49742d07e21edd728ab9a496b6f93"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
\n\
bool destination_reached\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, destination_reached);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, destination_reached);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(destination_reached);
    return size;
  }

  typedef boost::shared_ptr< ::simple::set_goalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simple::set_goalRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct set_goalRequest
typedef  ::simple::set_goalRequest_<std::allocator<void> > set_goalRequest;

typedef boost::shared_ptr< ::simple::set_goalRequest> set_goalRequestPtr;
typedef boost::shared_ptr< ::simple::set_goalRequest const> set_goalRequestConstPtr;


template <class ContainerAllocator>
struct set_goalResponse_ {
  typedef set_goalResponse_<ContainerAllocator> Type;

  set_goalResponse_()
  : latitude(0.0)
  , longitude(0.0)
  {
  }

  set_goalResponse_(const ContainerAllocator& _alloc)
  : latitude(0.0)
  , longitude(0.0)
  {
  }

  typedef double _latitude_type;
  double latitude;

  typedef double _longitude_type;
  double longitude;


private:
  static const char* __s_getDataType_() { return "simple/set_goalResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "680c6dc7da65a2421a822205dcbdb600"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "bdb49742d07e21edd728ab9a496b6f93"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
float64 latitude\n\
float64 longitude\n\
\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, latitude);
    ros::serialization::serialize(stream, longitude);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, latitude);
    ros::serialization::deserialize(stream, longitude);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(latitude);
    size += ros::serialization::serializationLength(longitude);
    return size;
  }

  typedef boost::shared_ptr< ::simple::set_goalResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simple::set_goalResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct set_goalResponse
typedef  ::simple::set_goalResponse_<std::allocator<void> > set_goalResponse;

typedef boost::shared_ptr< ::simple::set_goalResponse> set_goalResponsePtr;
typedef boost::shared_ptr< ::simple::set_goalResponse const> set_goalResponseConstPtr;

struct set_goal
{

typedef set_goalRequest Request;
typedef set_goalResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct set_goal
} // namespace simple

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::simple::set_goalRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::simple::set_goalRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::simple::set_goalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cbbbc1950ecbc84853dd369f15537bd2";
  }

  static const char* value(const  ::simple::set_goalRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcbbbc1950ecbc848ULL;
  static const uint64_t static_value2 = 0x53dd369f15537bd2ULL;
};

template<class ContainerAllocator>
struct DataType< ::simple::set_goalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "simple/set_goalRequest";
  }

  static const char* value(const  ::simple::set_goalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::simple::set_goalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
bool destination_reached\n\
\n\
\n\
";
  }

  static const char* value(const  ::simple::set_goalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::simple::set_goalRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::simple::set_goalResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::simple::set_goalResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::simple::set_goalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "680c6dc7da65a2421a822205dcbdb600";
  }

  static const char* value(const  ::simple::set_goalResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x680c6dc7da65a242ULL;
  static const uint64_t static_value2 = 0x1a822205dcbdb600ULL;
};

template<class ContainerAllocator>
struct DataType< ::simple::set_goalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "simple/set_goalResponse";
  }

  static const char* value(const  ::simple::set_goalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::simple::set_goalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float64 latitude\n\
float64 longitude\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::simple::set_goalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::simple::set_goalResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::simple::set_goalRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.destination_reached);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct set_goalRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::simple::set_goalResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.latitude);
    stream.next(m.longitude);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct set_goalResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<simple::set_goal> {
  static const char* value() 
  {
    return "bdb49742d07e21edd728ab9a496b6f93";
  }

  static const char* value(const simple::set_goal&) { return value(); } 
};

template<>
struct DataType<simple::set_goal> {
  static const char* value() 
  {
    return "simple/set_goal";
  }

  static const char* value(const simple::set_goal&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<simple::set_goalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bdb49742d07e21edd728ab9a496b6f93";
  }

  static const char* value(const simple::set_goalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<simple::set_goalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "simple/set_goal";
  }

  static const char* value(const simple::set_goalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<simple::set_goalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bdb49742d07e21edd728ab9a496b6f93";
  }

  static const char* value(const simple::set_goalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<simple::set_goalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "simple/set_goal";
  }

  static const char* value(const simple::set_goalResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SIMPLE_SERVICE_SET_GOAL_H

