/* Auto-generated by genmsg_cpp for file /home/nathan/ros_workspace/simple/srv/setGoal.srv */
#ifndef SIMPLE_SERVICE_SETGOAL_H
#define SIMPLE_SERVICE_SETGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace simple
{
template <class ContainerAllocator>
struct setGoalRequest_ {
  typedef setGoalRequest_<ContainerAllocator> Type;

  setGoalRequest_()
  : latitude(0.0)
  , longitude(0.0)
  {
  }

  setGoalRequest_(const ContainerAllocator& _alloc)
  : latitude(0.0)
  , longitude(0.0)
  {
  }

  typedef double _latitude_type;
  double latitude;

  typedef double _longitude_type;
  double longitude;


private:
  static const char* __s_getDataType_() { return "simple/setGoalRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "680c6dc7da65a2421a822205dcbdb600"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "b32bd4bd892938aeb7df6ad5978034bb"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
float64 latitude\n\
float64 longitude\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, latitude);
    ros::serialization::serialize(stream, longitude);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, latitude);
    ros::serialization::deserialize(stream, longitude);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(latitude);
    size += ros::serialization::serializationLength(longitude);
    return size;
  }

  typedef boost::shared_ptr< ::simple::setGoalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simple::setGoalRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setGoalRequest
typedef  ::simple::setGoalRequest_<std::allocator<void> > setGoalRequest;

typedef boost::shared_ptr< ::simple::setGoalRequest> setGoalRequestPtr;
typedef boost::shared_ptr< ::simple::setGoalRequest const> setGoalRequestConstPtr;


template <class ContainerAllocator>
struct setGoalResponse_ {
  typedef setGoalResponse_<ContainerAllocator> Type;

  setGoalResponse_()
  : success(false)
  {
  }

  setGoalResponse_(const ContainerAllocator& _alloc)
  : success(false)
  {
  }

  typedef uint8_t _success_type;
  uint8_t success;


private:
  static const char* __s_getDataType_() { return "simple/setGoalResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "358e233cde0c8a8bcfea4ce193f8fc15"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "b32bd4bd892938aeb7df6ad5978034bb"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool success\n\
\n\
\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, success);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(success);
    return size;
  }

  typedef boost::shared_ptr< ::simple::setGoalResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::simple::setGoalResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct setGoalResponse
typedef  ::simple::setGoalResponse_<std::allocator<void> > setGoalResponse;

typedef boost::shared_ptr< ::simple::setGoalResponse> setGoalResponsePtr;
typedef boost::shared_ptr< ::simple::setGoalResponse const> setGoalResponseConstPtr;

struct setGoal
{

typedef setGoalRequest Request;
typedef setGoalResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct setGoal
} // namespace simple

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::simple::setGoalRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::simple::setGoalRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::simple::setGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "680c6dc7da65a2421a822205dcbdb600";
  }

  static const char* value(const  ::simple::setGoalRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x680c6dc7da65a242ULL;
  static const uint64_t static_value2 = 0x1a822205dcbdb600ULL;
};

template<class ContainerAllocator>
struct DataType< ::simple::setGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "simple/setGoalRequest";
  }

  static const char* value(const  ::simple::setGoalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::simple::setGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float64 latitude\n\
float64 longitude\n\
\n\
\n\
";
  }

  static const char* value(const  ::simple::setGoalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::simple::setGoalRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::simple::setGoalResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::simple::setGoalResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::simple::setGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "358e233cde0c8a8bcfea4ce193f8fc15";
  }

  static const char* value(const  ::simple::setGoalResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x358e233cde0c8a8bULL;
  static const uint64_t static_value2 = 0xcfea4ce193f8fc15ULL;
};

template<class ContainerAllocator>
struct DataType< ::simple::setGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "simple/setGoalResponse";
  }

  static const char* value(const  ::simple::setGoalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::simple::setGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool success\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::simple::setGoalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::simple::setGoalResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::simple::setGoalRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.latitude);
    stream.next(m.longitude);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setGoalRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::simple::setGoalResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct setGoalResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<simple::setGoal> {
  static const char* value() 
  {
    return "b32bd4bd892938aeb7df6ad5978034bb";
  }

  static const char* value(const simple::setGoal&) { return value(); } 
};

template<>
struct DataType<simple::setGoal> {
  static const char* value() 
  {
    return "simple/setGoal";
  }

  static const char* value(const simple::setGoal&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<simple::setGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b32bd4bd892938aeb7df6ad5978034bb";
  }

  static const char* value(const simple::setGoalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<simple::setGoalRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "simple/setGoal";
  }

  static const char* value(const simple::setGoalRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<simple::setGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b32bd4bd892938aeb7df6ad5978034bb";
  }

  static const char* value(const simple::setGoalResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<simple::setGoalResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "simple/setGoal";
  }

  static const char* value(const simple::setGoalResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SIMPLE_SERVICE_SETGOAL_H

